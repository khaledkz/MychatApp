#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('firdaypro:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


// sockiet.io

var io = require('socket.io')(server);
var connection = [];
var users=[];
var usersSocet='';
var newArray = [];


io.on('connection',function (socket) {
    // console.log('connection');
    connection.push(socket.connection);
    // console.log('socket connections are '+connection.length);

    socket.on('disconnect',function () {
        // console.log('disconnect');
        connection.splice(socket.connection,1);
        // console.log('socket connections are '+connection.length);


    });

    socket.on('send newuser2server',function (data) {
         if(users.indexOf(data)!==-1){

            socket.emit('server senderr newUser2page','This name is used plz try another name !!');
            // console.log('error change the name plz')

        }else{
             socket.usersSocet=data;
            users.push(data);
            socket.emit('server send newUser2page',data);

            updateUsers(users);
        }


    });


    socket.on('disconnect',function (data) {

         // for(var i=0;i<users.length;i++){
         //     if(users[i]!==socket.usersSocet){
         //         if(newArray.indexOf(users[i])!==-1){
         //         }else{
         //             newArray.push(users[i]);
         //         }
         //     }
         // }
        Array.prototype.remove = function(x){
            return this.filter(function(v){
                return v !== x;
            });
        };

        users=users.remove(socket.usersSocet);

        console.log(socket.usersSocet);
        console.log(users);

        io.emit('user disconnect',users);

    });


        function updateUsers(users) {
          io.emit('update User server',users);
            // console.log(users);

        }

        socket.on('chatmsg2server',function (data) {
            // console.log(data);
            io.emit('server2chatArea Msgs',data);
        });

        socket.on('userTypingMsg',function (data) {
             socket.broadcast.emit('serverShowTypingmsg',data);
         })
});